// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// generate new affiliate code
	// (POST /affiliate/code)
	GenerateCode(ctx echo.Context, params GenerateCodeParams) error
	// get general donation data
	// (GET /donation/data)
	DonationData(ctx echo.Context) error
	// is the service alive?
	// (GET /live)
	Alive(ctx echo.Context) error
	// is the service alive and ready to do work?
	// (GET /ready)
	Ready(ctx echo.Context) error
	// get the donation data for the wallet address in question
	// (GET /user/data/{address})
	UserData(ctx echo.Context, address string) error
	// what is the version of this service?
	// (GET /version)
	Version(ctx echo.Context) error
	// associate a wallet address with an affiliate code
	// (POST /wallet/connection)
	ConnectWallet(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GenerateCode converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateCode(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateCodeParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "delphi-key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("delphi-key")]; found {
		var DelphiKey DelphiKey
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for delphi-key, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "delphi-key", runtime.ParamLocationHeader, valueList[0], &DelphiKey)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter delphi-key: %s", err))
		}

		params.DelphiKey = DelphiKey
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter delphi-key is required, but not found"))
	}
	// ------------- Required header parameter "delphi-ts" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("delphi-ts")]; found {
		var DelphiTs DelphiTs
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for delphi-ts, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "delphi-ts", runtime.ParamLocationHeader, valueList[0], &DelphiTs)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter delphi-ts: %s", err))
		}

		params.DelphiTs = DelphiTs
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter delphi-ts is required, but not found"))
	}
	// ------------- Required header parameter "delphi-signature" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("delphi-signature")]; found {
		var DelphiSignature DelphiSignature
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for delphi-signature, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "delphi-signature", runtime.ParamLocationHeader, valueList[0], &DelphiSignature)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter delphi-signature: %s", err))
		}

		params.DelphiSignature = DelphiSignature
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter delphi-signature is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GenerateCode(ctx, params)
	return err
}

// DonationData converts echo context to params.
func (w *ServerInterfaceWrapper) DonationData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DonationData(ctx)
	return err
}

// Alive converts echo context to params.
func (w *ServerInterfaceWrapper) Alive(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Alive(ctx)
	return err
}

// Ready converts echo context to params.
func (w *ServerInterfaceWrapper) Ready(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Ready(ctx)
	return err
}

// UserData converts echo context to params.
func (w *ServerInterfaceWrapper) UserData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserData(ctx, address)
	return err
}

// Version converts echo context to params.
func (w *ServerInterfaceWrapper) Version(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Version(ctx)
	return err
}

// ConnectWallet converts echo context to params.
func (w *ServerInterfaceWrapper) ConnectWallet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ConnectWallet(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/affiliate/code", wrapper.GenerateCode)
	router.GET(baseURL+"/donation/data", wrapper.DonationData)
	router.GET(baseURL+"/live", wrapper.Alive)
	router.GET(baseURL+"/ready", wrapper.Ready)
	router.GET(baseURL+"/user/data/:address", wrapper.UserData)
	router.GET(baseURL+"/version", wrapper.Version)
	router.POST(baseURL+"/wallet/connection", wrapper.ConnectWallet)

}

type GenerateCodeRequestObject struct {
	Params GenerateCodeParams
}

type GenerateCodeResponseObject interface {
	VisitGenerateCodeResponse(w http.ResponseWriter) error
}

type GenerateCode200JSONResponse AffiliateCode

func (response GenerateCode200JSONResponse) VisitGenerateCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GenerateCode400JSONResponse Error

func (response GenerateCode400JSONResponse) VisitGenerateCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GenerateCode401Response struct {
}

func (response GenerateCode401Response) VisitGenerateCodeResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GenerateCode5XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GenerateCode5XXJSONResponse) VisitGenerateCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DonationDataRequestObject struct {
}

type DonationDataResponseObject interface {
	VisitDonationDataResponse(w http.ResponseWriter) error
}

type DonationData200JSONResponse DonationData

func (response DonationData200JSONResponse) VisitDonationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DonationData400JSONResponse Error

func (response DonationData400JSONResponse) VisitDonationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DonationData5XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DonationData5XXJSONResponse) VisitDonationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AliveRequestObject struct {
}

type AliveResponseObject interface {
	VisitAliveResponse(w http.ResponseWriter) error
}

type Alive200Response struct {
}

func (response Alive200Response) VisitAliveResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ReadyRequestObject struct {
}

type ReadyResponseObject interface {
	VisitReadyResponse(w http.ResponseWriter) error
}

type Ready200Response struct {
}

func (response Ready200Response) VisitReadyResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type Ready503Response struct {
}

func (response Ready503Response) VisitReadyResponse(w http.ResponseWriter) error {
	w.WriteHeader(503)
	return nil
}

type UserDataRequestObject struct {
	Address string `json:"address"`
}

type UserDataResponseObject interface {
	VisitUserDataResponse(w http.ResponseWriter) error
}

type UserData200JSONResponse UserDataResult

func (response UserData200JSONResponse) VisitUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UserData400JSONResponse Error

func (response UserData400JSONResponse) VisitUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UserData5XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UserData5XXJSONResponse) VisitUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VersionRequestObject struct {
}

type VersionResponseObject interface {
	VisitVersionResponse(w http.ResponseWriter) error
}

type Version200JSONResponse string

func (response Version200JSONResponse) VisitVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ConnectWalletRequestObject struct {
	Body *ConnectWalletJSONRequestBody
}

type ConnectWalletResponseObject interface {
	VisitConnectWalletResponse(w http.ResponseWriter) error
}

type ConnectWallet200JSONResponse UserDataResult

func (response ConnectWallet200JSONResponse) VisitConnectWalletResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ConnectWallet400JSONResponse Error

func (response ConnectWallet400JSONResponse) VisitConnectWalletResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ConnectWallet5XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ConnectWallet5XXJSONResponse) VisitConnectWalletResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// generate new affiliate code
	// (POST /affiliate/code)
	GenerateCode(ctx context.Context, request GenerateCodeRequestObject) (GenerateCodeResponseObject, error)
	// get general donation data
	// (GET /donation/data)
	DonationData(ctx context.Context, request DonationDataRequestObject) (DonationDataResponseObject, error)
	// is the service alive?
	// (GET /live)
	Alive(ctx context.Context, request AliveRequestObject) (AliveResponseObject, error)
	// is the service alive and ready to do work?
	// (GET /ready)
	Ready(ctx context.Context, request ReadyRequestObject) (ReadyResponseObject, error)
	// get the donation data for the wallet address in question
	// (GET /user/data/{address})
	UserData(ctx context.Context, request UserDataRequestObject) (UserDataResponseObject, error)
	// what is the version of this service?
	// (GET /version)
	Version(ctx context.Context, request VersionRequestObject) (VersionResponseObject, error)
	// associate a wallet address with an affiliate code
	// (POST /wallet/connection)
	ConnectWallet(ctx context.Context, request ConnectWalletRequestObject) (ConnectWalletResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GenerateCode operation middleware
func (sh *strictHandler) GenerateCode(ctx echo.Context, params GenerateCodeParams) error {
	var request GenerateCodeRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GenerateCode(ctx.Request().Context(), request.(GenerateCodeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GenerateCode")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GenerateCodeResponseObject); ok {
		return validResponse.VisitGenerateCodeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DonationData operation middleware
func (sh *strictHandler) DonationData(ctx echo.Context) error {
	var request DonationDataRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DonationData(ctx.Request().Context(), request.(DonationDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DonationData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DonationDataResponseObject); ok {
		return validResponse.VisitDonationDataResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Alive operation middleware
func (sh *strictHandler) Alive(ctx echo.Context) error {
	var request AliveRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Alive(ctx.Request().Context(), request.(AliveRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Alive")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AliveResponseObject); ok {
		return validResponse.VisitAliveResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Ready operation middleware
func (sh *strictHandler) Ready(ctx echo.Context) error {
	var request ReadyRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Ready(ctx.Request().Context(), request.(ReadyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Ready")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ReadyResponseObject); ok {
		return validResponse.VisitReadyResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UserData operation middleware
func (sh *strictHandler) UserData(ctx echo.Context, address string) error {
	var request UserDataRequestObject

	request.Address = address

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserData(ctx.Request().Context(), request.(UserDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserDataResponseObject); ok {
		return validResponse.VisitUserDataResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Version operation middleware
func (sh *strictHandler) Version(ctx echo.Context) error {
	var request VersionRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Version(ctx.Request().Context(), request.(VersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Version")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(VersionResponseObject); ok {
		return validResponse.VisitVersionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ConnectWallet operation middleware
func (sh *strictHandler) ConnectWallet(ctx echo.Context) error {
	var request ConnectWalletRequestObject

	var body ConnectWalletJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ConnectWallet(ctx.Request().Context(), request.(ConnectWalletRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ConnectWallet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ConnectWalletResponseObject); ok {
		return validResponse.VisitConnectWalletResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
