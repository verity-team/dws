// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// set affiliate code for donation
	// (POST /donation/affiliate)
	SetAffiliateCode(ctx echo.Context) error
	// get general donation data
	// (GET /donation/data/)
	DonationData(ctx echo.Context) error
	// get the donation data for the wallet address in question
	// (GET /user/data/{address})
	UserData(ctx echo.Context, address string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SetAffiliateCode converts echo context to params.
func (w *ServerInterfaceWrapper) SetAffiliateCode(ctx echo.Context) error {
	var err error

	ctx.Set(AccessCodeScopes, []string{"write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SetAffiliateCode(ctx)
	return err
}

// DonationData converts echo context to params.
func (w *ServerInterfaceWrapper) DonationData(ctx echo.Context) error {
	var err error

	ctx.Set(AccessCodeScopes, []string{"read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DonationData(ctx)
	return err
}

// UserData converts echo context to params.
func (w *ServerInterfaceWrapper) UserData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(AccessCodeScopes, []string{"read"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserData(ctx, address)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/donation/affiliate", wrapper.SetAffiliateCode)
	router.GET(baseURL+"/donation/data/", wrapper.DonationData)
	router.GET(baseURL+"/user/data/:address", wrapper.UserData)

}

type SetAffiliateCodeRequestObject struct {
	Body *SetAffiliateCodeJSONRequestBody
}

type SetAffiliateCodeResponseObject interface {
	VisitSetAffiliateCodeResponse(w http.ResponseWriter) error
}

type SetAffiliateCode200Response struct {
}

func (response SetAffiliateCode200Response) VisitSetAffiliateCodeResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type SetAffiliateCode400JSONResponse Error

func (response SetAffiliateCode400JSONResponse) VisitSetAffiliateCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SetAffiliateCode401JSONResponse Error

func (response SetAffiliateCode401JSONResponse) VisitSetAffiliateCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type SetAffiliateCode5XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response SetAffiliateCode5XXJSONResponse) VisitSetAffiliateCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DonationDataRequestObject struct {
}

type DonationDataResponseObject interface {
	VisitDonationDataResponse(w http.ResponseWriter) error
}

type DonationData200JSONResponse DonationData

func (response DonationData200JSONResponse) VisitDonationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DonationData400JSONResponse Error

func (response DonationData400JSONResponse) VisitDonationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DonationData401JSONResponse Error

func (response DonationData401JSONResponse) VisitDonationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DonationData5XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DonationData5XXJSONResponse) VisitDonationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UserDataRequestObject struct {
	Address string `json:"address"`
}

type UserDataResponseObject interface {
	VisitUserDataResponse(w http.ResponseWriter) error
}

type UserData200JSONResponse UserData

func (response UserData200JSONResponse) VisitUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UserData400JSONResponse Error

func (response UserData400JSONResponse) VisitUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UserData401JSONResponse Error

func (response UserData401JSONResponse) VisitUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UserData5XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UserData5XXJSONResponse) VisitUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// set affiliate code for donation
	// (POST /donation/affiliate)
	SetAffiliateCode(ctx context.Context, request SetAffiliateCodeRequestObject) (SetAffiliateCodeResponseObject, error)
	// get general donation data
	// (GET /donation/data/)
	DonationData(ctx context.Context, request DonationDataRequestObject) (DonationDataResponseObject, error)
	// get the donation data for the wallet address in question
	// (GET /user/data/{address})
	UserData(ctx context.Context, request UserDataRequestObject) (UserDataResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// SetAffiliateCode operation middleware
func (sh *strictHandler) SetAffiliateCode(ctx echo.Context) error {
	var request SetAffiliateCodeRequestObject

	var body SetAffiliateCodeJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SetAffiliateCode(ctx.Request().Context(), request.(SetAffiliateCodeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SetAffiliateCode")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SetAffiliateCodeResponseObject); ok {
		return validResponse.VisitSetAffiliateCodeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DonationData operation middleware
func (sh *strictHandler) DonationData(ctx echo.Context) error {
	var request DonationDataRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DonationData(ctx.Request().Context(), request.(DonationDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DonationData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DonationDataResponseObject); ok {
		return validResponse.VisitDonationDataResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UserData operation middleware
func (sh *strictHandler) UserData(ctx echo.Context, address string) error {
	var request UserDataRequestObject

	request.Address = address

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserData(ctx.Request().Context(), request.(UserDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserDataResponseObject); ok {
		return validResponse.VisitUserDataResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
