// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// set affiliate code for donation
	// (POST /donation/affiliate)
	SetAffiliateCode(ctx echo.Context) error
	// get general donation data
	// (GET /donation/data/)
	DonationData(ctx echo.Context) error
	// get the donation data for the wallet address in question
	// (GET /user/data/{address})
	UserData(ctx echo.Context, address string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SetAffiliateCode converts echo context to params.
func (w *ServerInterfaceWrapper) SetAffiliateCode(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SetAffiliateCode(ctx)
	return err
}

// DonationData converts echo context to params.
func (w *ServerInterfaceWrapper) DonationData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DonationData(ctx)
	return err
}

// UserData converts echo context to params.
func (w *ServerInterfaceWrapper) UserData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserData(ctx, address)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/donation/affiliate", wrapper.SetAffiliateCode)
	router.GET(baseURL+"/donation/data/", wrapper.DonationData)
	router.GET(baseURL+"/user/data/:address", wrapper.UserData)

}

type SetAffiliateCodeRequestObject struct {
	Body *SetAffiliateCodeJSONRequestBody
}

type SetAffiliateCodeResponseObject interface {
	VisitSetAffiliateCodeResponse(w http.ResponseWriter) error
}

type SetAffiliateCode200Response struct {
}

func (response SetAffiliateCode200Response) VisitSetAffiliateCodeResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type SetAffiliateCode400JSONResponse Error

func (response SetAffiliateCode400JSONResponse) VisitSetAffiliateCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SetAffiliateCode401JSONResponse Error

func (response SetAffiliateCode401JSONResponse) VisitSetAffiliateCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type SetAffiliateCode5XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response SetAffiliateCode5XXJSONResponse) VisitSetAffiliateCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DonationDataRequestObject struct {
}

type DonationDataResponseObject interface {
	VisitDonationDataResponse(w http.ResponseWriter) error
}

type DonationData200JSONResponse DonationData

func (response DonationData200JSONResponse) VisitDonationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DonationData400JSONResponse Error

func (response DonationData400JSONResponse) VisitDonationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DonationData401JSONResponse Error

func (response DonationData401JSONResponse) VisitDonationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DonationData5XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DonationData5XXJSONResponse) VisitDonationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UserDataRequestObject struct {
	Address string `json:"address"`
}

type UserDataResponseObject interface {
	VisitUserDataResponse(w http.ResponseWriter) error
}

type UserData200JSONResponse UserData

func (response UserData200JSONResponse) VisitUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UserData400JSONResponse Error

func (response UserData400JSONResponse) VisitUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UserData401JSONResponse Error

func (response UserData401JSONResponse) VisitUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UserData5XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UserData5XXJSONResponse) VisitUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// set affiliate code for donation
	// (POST /donation/affiliate)
	SetAffiliateCode(ctx context.Context, request SetAffiliateCodeRequestObject) (SetAffiliateCodeResponseObject, error)
	// get general donation data
	// (GET /donation/data/)
	DonationData(ctx context.Context, request DonationDataRequestObject) (DonationDataResponseObject, error)
	// get the donation data for the wallet address in question
	// (GET /user/data/{address})
	UserData(ctx context.Context, request UserDataRequestObject) (UserDataResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// SetAffiliateCode operation middleware
func (sh *strictHandler) SetAffiliateCode(ctx echo.Context) error {
	var request SetAffiliateCodeRequestObject

	var body SetAffiliateCodeJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SetAffiliateCode(ctx.Request().Context(), request.(SetAffiliateCodeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SetAffiliateCode")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SetAffiliateCodeResponseObject); ok {
		return validResponse.VisitSetAffiliateCodeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DonationData operation middleware
func (sh *strictHandler) DonationData(ctx echo.Context) error {
	var request DonationDataRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DonationData(ctx.Request().Context(), request.(DonationDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DonationData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DonationDataResponseObject); ok {
		return validResponse.VisitDonationDataResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UserData operation middleware
func (sh *strictHandler) UserData(ctx echo.Context, address string) error {
	var request UserDataRequestObject

	request.Address = address

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserData(ctx.Request().Context(), request.(UserDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserDataResponseObject); ok {
		return validResponse.VisitUserDataResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
