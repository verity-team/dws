// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// generate new affiliate code
	// (POST /affiliate/code)
	GenAffiliateCode(ctx echo.Context, params GenAffiliateCodeParams) error
	// set affiliate code for donation
	// (POST /donation/affiliate)
	SetAffiliateCode(ctx echo.Context, params SetAffiliateCodeParams) error
	// get general donation data
	// (GET /donation/data/)
	DonationData(ctx echo.Context) error
	// is the service alive?
	// (GET /live)
	Alive(ctx echo.Context) error
	// is the service alive and ready to do work?
	// (GET /ready)
	Ready(ctx echo.Context) error
	// get the donation data for the wallet address in question
	// (GET /user/data/{address})
	UserData(ctx echo.Context, address string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GenAffiliateCode converts echo context to params.
func (w *ServerInterfaceWrapper) GenAffiliateCode(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GenAffiliateCodeParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "delphi-api-key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("delphi-api-key")]; found {
		var DelphiApiKey DelphiKey
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for delphi-api-key, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "delphi-api-key", runtime.ParamLocationHeader, valueList[0], &DelphiApiKey)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter delphi-api-key: %s", err))
		}

		params.DelphiApiKey = DelphiApiKey
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter delphi-api-key is required, but not found"))
	}
	// ------------- Required header parameter "delphi-nonce" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("delphi-nonce")]; found {
		var DelphiNonce DelphiNonce
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for delphi-nonce, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "delphi-nonce", runtime.ParamLocationHeader, valueList[0], &DelphiNonce)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter delphi-nonce: %s", err))
		}

		params.DelphiNonce = DelphiNonce
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter delphi-nonce is required, but not found"))
	}
	// ------------- Required header parameter "delphi-auth-string" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("delphi-auth-string")]; found {
		var DelphiAuthString DelphiSign
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for delphi-auth-string, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "delphi-auth-string", runtime.ParamLocationHeader, valueList[0], &DelphiAuthString)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter delphi-auth-string: %s", err))
		}

		params.DelphiAuthString = DelphiAuthString
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter delphi-auth-string is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GenAffiliateCode(ctx, params)
	return err
}

// SetAffiliateCode converts echo context to params.
func (w *ServerInterfaceWrapper) SetAffiliateCode(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SetAffiliateCodeParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "delphi-api-key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("delphi-api-key")]; found {
		var DelphiApiKey DelphiKey
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for delphi-api-key, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "delphi-api-key", runtime.ParamLocationHeader, valueList[0], &DelphiApiKey)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter delphi-api-key: %s", err))
		}

		params.DelphiApiKey = DelphiApiKey
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter delphi-api-key is required, but not found"))
	}
	// ------------- Required header parameter "delphi-nonce" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("delphi-nonce")]; found {
		var DelphiNonce DelphiNonce
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for delphi-nonce, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "delphi-nonce", runtime.ParamLocationHeader, valueList[0], &DelphiNonce)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter delphi-nonce: %s", err))
		}

		params.DelphiNonce = DelphiNonce
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter delphi-nonce is required, but not found"))
	}
	// ------------- Required header parameter "delphi-auth-string" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("delphi-auth-string")]; found {
		var DelphiAuthString DelphiSign
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for delphi-auth-string, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "delphi-auth-string", runtime.ParamLocationHeader, valueList[0], &DelphiAuthString)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter delphi-auth-string: %s", err))
		}

		params.DelphiAuthString = DelphiAuthString
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter delphi-auth-string is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SetAffiliateCode(ctx, params)
	return err
}

// DonationData converts echo context to params.
func (w *ServerInterfaceWrapper) DonationData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DonationData(ctx)
	return err
}

// Alive converts echo context to params.
func (w *ServerInterfaceWrapper) Alive(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Alive(ctx)
	return err
}

// Ready converts echo context to params.
func (w *ServerInterfaceWrapper) Ready(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Ready(ctx)
	return err
}

// UserData converts echo context to params.
func (w *ServerInterfaceWrapper) UserData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserData(ctx, address)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/affiliate/code", wrapper.GenAffiliateCode)
	router.POST(baseURL+"/donation/affiliate", wrapper.SetAffiliateCode)
	router.GET(baseURL+"/donation/data/", wrapper.DonationData)
	router.GET(baseURL+"/live", wrapper.Alive)
	router.GET(baseURL+"/ready", wrapper.Ready)
	router.GET(baseURL+"/user/data/:address", wrapper.UserData)

}

type GenAffiliateCodeRequestObject struct {
	Params GenAffiliateCodeParams
	Body   *GenAffiliateCodeJSONRequestBody
}

type GenAffiliateCodeResponseObject interface {
	VisitGenAffiliateCodeResponse(w http.ResponseWriter) error
}

type GenAffiliateCode200JSONResponse AffiliateCode

func (response GenAffiliateCode200JSONResponse) VisitGenAffiliateCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GenAffiliateCode400JSONResponse Error

func (response GenAffiliateCode400JSONResponse) VisitGenAffiliateCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GenAffiliateCode401JSONResponse Error

func (response GenAffiliateCode401JSONResponse) VisitGenAffiliateCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GenAffiliateCode5XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GenAffiliateCode5XXJSONResponse) VisitGenAffiliateCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SetAffiliateCodeRequestObject struct {
	Params SetAffiliateCodeParams
	Body   *SetAffiliateCodeJSONRequestBody
}

type SetAffiliateCodeResponseObject interface {
	VisitSetAffiliateCodeResponse(w http.ResponseWriter) error
}

type SetAffiliateCode200Response struct {
}

func (response SetAffiliateCode200Response) VisitSetAffiliateCodeResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type SetAffiliateCode400JSONResponse Error

func (response SetAffiliateCode400JSONResponse) VisitSetAffiliateCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SetAffiliateCode401JSONResponse Error

func (response SetAffiliateCode401JSONResponse) VisitSetAffiliateCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type SetAffiliateCode5XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response SetAffiliateCode5XXJSONResponse) VisitSetAffiliateCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DonationDataRequestObject struct {
}

type DonationDataResponseObject interface {
	VisitDonationDataResponse(w http.ResponseWriter) error
}

type DonationData200JSONResponse DonationData

func (response DonationData200JSONResponse) VisitDonationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DonationData400JSONResponse Error

func (response DonationData400JSONResponse) VisitDonationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DonationData401JSONResponse Error

func (response DonationData401JSONResponse) VisitDonationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DonationData5XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DonationData5XXJSONResponse) VisitDonationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AliveRequestObject struct {
}

type AliveResponseObject interface {
	VisitAliveResponse(w http.ResponseWriter) error
}

type Alive200Response struct {
}

func (response Alive200Response) VisitAliveResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ReadyRequestObject struct {
}

type ReadyResponseObject interface {
	VisitReadyResponse(w http.ResponseWriter) error
}

type Ready200Response struct {
}

func (response Ready200Response) VisitReadyResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type Ready503Response struct {
}

func (response Ready503Response) VisitReadyResponse(w http.ResponseWriter) error {
	w.WriteHeader(503)
	return nil
}

type UserDataRequestObject struct {
	Address string `json:"address"`
}

type UserDataResponseObject interface {
	VisitUserDataResponse(w http.ResponseWriter) error
}

type UserData200JSONResponse UserData

func (response UserData200JSONResponse) VisitUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UserData400JSONResponse Error

func (response UserData400JSONResponse) VisitUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UserData401JSONResponse Error

func (response UserData401JSONResponse) VisitUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UserData404Response struct {
}

func (response UserData404Response) VisitUserDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UserData5XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UserData5XXJSONResponse) VisitUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// generate new affiliate code
	// (POST /affiliate/code)
	GenAffiliateCode(ctx context.Context, request GenAffiliateCodeRequestObject) (GenAffiliateCodeResponseObject, error)
	// set affiliate code for donation
	// (POST /donation/affiliate)
	SetAffiliateCode(ctx context.Context, request SetAffiliateCodeRequestObject) (SetAffiliateCodeResponseObject, error)
	// get general donation data
	// (GET /donation/data/)
	DonationData(ctx context.Context, request DonationDataRequestObject) (DonationDataResponseObject, error)
	// is the service alive?
	// (GET /live)
	Alive(ctx context.Context, request AliveRequestObject) (AliveResponseObject, error)
	// is the service alive and ready to do work?
	// (GET /ready)
	Ready(ctx context.Context, request ReadyRequestObject) (ReadyResponseObject, error)
	// get the donation data for the wallet address in question
	// (GET /user/data/{address})
	UserData(ctx context.Context, request UserDataRequestObject) (UserDataResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GenAffiliateCode operation middleware
func (sh *strictHandler) GenAffiliateCode(ctx echo.Context, params GenAffiliateCodeParams) error {
	var request GenAffiliateCodeRequestObject

	request.Params = params

	var body GenAffiliateCodeJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GenAffiliateCode(ctx.Request().Context(), request.(GenAffiliateCodeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GenAffiliateCode")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GenAffiliateCodeResponseObject); ok {
		return validResponse.VisitGenAffiliateCodeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// SetAffiliateCode operation middleware
func (sh *strictHandler) SetAffiliateCode(ctx echo.Context, params SetAffiliateCodeParams) error {
	var request SetAffiliateCodeRequestObject

	request.Params = params

	var body SetAffiliateCodeJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SetAffiliateCode(ctx.Request().Context(), request.(SetAffiliateCodeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SetAffiliateCode")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SetAffiliateCodeResponseObject); ok {
		return validResponse.VisitSetAffiliateCodeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DonationData operation middleware
func (sh *strictHandler) DonationData(ctx echo.Context) error {
	var request DonationDataRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DonationData(ctx.Request().Context(), request.(DonationDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DonationData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DonationDataResponseObject); ok {
		return validResponse.VisitDonationDataResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Alive operation middleware
func (sh *strictHandler) Alive(ctx echo.Context) error {
	var request AliveRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Alive(ctx.Request().Context(), request.(AliveRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Alive")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AliveResponseObject); ok {
		return validResponse.VisitAliveResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Ready operation middleware
func (sh *strictHandler) Ready(ctx echo.Context) error {
	var request ReadyRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Ready(ctx.Request().Context(), request.(ReadyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Ready")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ReadyResponseObject); ok {
		return validResponse.VisitReadyResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UserData operation middleware
func (sh *strictHandler) UserData(ctx echo.Context, address string) error {
	var request UserDataRequestObject

	request.Address = address

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserData(ctx.Request().Context(), request.(UserDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserDataResponseObject); ok {
		return validResponse.VisitUserDataResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
