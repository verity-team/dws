// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// set affiliate code for donation
	// (POST /donation/affiliate)
	SetAffiliateCode(ctx echo.Context) error
	// get general donation data
	// (GET /donation/data/)
	DonationData(ctx echo.Context) error
	// is the service alive?
	// (GET /live)
	Alive(ctx echo.Context) error
	// is the service alive and ready to do work?
	// (GET /ready)
	Ready(ctx echo.Context) error
	// get the donation data for the wallet address in question
	// (GET /user/data/{address})
	UserData(ctx echo.Context, address string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SetAffiliateCode converts echo context to params.
func (w *ServerInterfaceWrapper) SetAffiliateCode(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SetAffiliateCode(ctx)
	return err
}

// DonationData converts echo context to params.
func (w *ServerInterfaceWrapper) DonationData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DonationData(ctx)
	return err
}

// Alive converts echo context to params.
func (w *ServerInterfaceWrapper) Alive(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Alive(ctx)
	return err
}

// Ready converts echo context to params.
func (w *ServerInterfaceWrapper) Ready(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Ready(ctx)
	return err
}

// UserData converts echo context to params.
func (w *ServerInterfaceWrapper) UserData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserData(ctx, address)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/donation/affiliate", wrapper.SetAffiliateCode)
	router.GET(baseURL+"/donation/data/", wrapper.DonationData)
	router.GET(baseURL+"/live", wrapper.Alive)
	router.GET(baseURL+"/ready", wrapper.Ready)
	router.GET(baseURL+"/user/data/:address", wrapper.UserData)

}

type SetAffiliateCodeRequestObject struct {
	Body *SetAffiliateCodeJSONRequestBody
}

type SetAffiliateCodeResponseObject interface {
	VisitSetAffiliateCodeResponse(w http.ResponseWriter) error
}

type SetAffiliateCode200Response struct {
}

func (response SetAffiliateCode200Response) VisitSetAffiliateCodeResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type SetAffiliateCode400JSONResponse Error

func (response SetAffiliateCode400JSONResponse) VisitSetAffiliateCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SetAffiliateCode401JSONResponse Error

func (response SetAffiliateCode401JSONResponse) VisitSetAffiliateCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type SetAffiliateCode5XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response SetAffiliateCode5XXJSONResponse) VisitSetAffiliateCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DonationDataRequestObject struct {
}

type DonationDataResponseObject interface {
	VisitDonationDataResponse(w http.ResponseWriter) error
}

type DonationData200JSONResponse DonationData

func (response DonationData200JSONResponse) VisitDonationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DonationData400JSONResponse Error

func (response DonationData400JSONResponse) VisitDonationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DonationData401JSONResponse Error

func (response DonationData401JSONResponse) VisitDonationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DonationData5XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DonationData5XXJSONResponse) VisitDonationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AliveRequestObject struct {
}

type AliveResponseObject interface {
	VisitAliveResponse(w http.ResponseWriter) error
}

type Alive200Response struct {
}

func (response Alive200Response) VisitAliveResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ReadyRequestObject struct {
}

type ReadyResponseObject interface {
	VisitReadyResponse(w http.ResponseWriter) error
}

type Ready200Response struct {
}

func (response Ready200Response) VisitReadyResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type Ready503Response struct {
}

func (response Ready503Response) VisitReadyResponse(w http.ResponseWriter) error {
	w.WriteHeader(503)
	return nil
}

type UserDataRequestObject struct {
	Address string `json:"address"`
}

type UserDataResponseObject interface {
	VisitUserDataResponse(w http.ResponseWriter) error
}

type UserData200JSONResponse UserData

func (response UserData200JSONResponse) VisitUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UserData400JSONResponse Error

func (response UserData400JSONResponse) VisitUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UserData401JSONResponse Error

func (response UserData401JSONResponse) VisitUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UserData404Response struct {
}

func (response UserData404Response) VisitUserDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UserData5XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UserData5XXJSONResponse) VisitUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// set affiliate code for donation
	// (POST /donation/affiliate)
	SetAffiliateCode(ctx context.Context, request SetAffiliateCodeRequestObject) (SetAffiliateCodeResponseObject, error)
	// get general donation data
	// (GET /donation/data/)
	DonationData(ctx context.Context, request DonationDataRequestObject) (DonationDataResponseObject, error)
	// is the service alive?
	// (GET /live)
	Alive(ctx context.Context, request AliveRequestObject) (AliveResponseObject, error)
	// is the service alive and ready to do work?
	// (GET /ready)
	Ready(ctx context.Context, request ReadyRequestObject) (ReadyResponseObject, error)
	// get the donation data for the wallet address in question
	// (GET /user/data/{address})
	UserData(ctx context.Context, request UserDataRequestObject) (UserDataResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// SetAffiliateCode operation middleware
func (sh *strictHandler) SetAffiliateCode(ctx echo.Context) error {
	var request SetAffiliateCodeRequestObject

	var body SetAffiliateCodeJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SetAffiliateCode(ctx.Request().Context(), request.(SetAffiliateCodeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SetAffiliateCode")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SetAffiliateCodeResponseObject); ok {
		return validResponse.VisitSetAffiliateCodeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DonationData operation middleware
func (sh *strictHandler) DonationData(ctx echo.Context) error {
	var request DonationDataRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DonationData(ctx.Request().Context(), request.(DonationDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DonationData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DonationDataResponseObject); ok {
		return validResponse.VisitDonationDataResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Alive operation middleware
func (sh *strictHandler) Alive(ctx echo.Context) error {
	var request AliveRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Alive(ctx.Request().Context(), request.(AliveRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Alive")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AliveResponseObject); ok {
		return validResponse.VisitAliveResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Ready operation middleware
func (sh *strictHandler) Ready(ctx echo.Context) error {
	var request ReadyRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Ready(ctx.Request().Context(), request.(ReadyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Ready")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ReadyResponseObject); ok {
		return validResponse.VisitReadyResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UserData operation middleware
func (sh *strictHandler) UserData(ctx echo.Context, address string) error {
	var request UserDataRequestObject

	request.Address = address

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserData(ctx.Request().Context(), request.(UserDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserDataResponseObject); ok {
		return validResponse.VisitUserDataResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZf4/buNH+KoTeF+gV9dqSf8X2oWg32W5waNAGTRY44HbhG4kjm12JVElqvUbg714M",
	"KcuWLWfd1IuiRf6KVxqRzwxnnnmG+RIkKi+URGlNMPsSmGSJObifkKYiE2BxrvEfJRpLDwutCtRWoDNJ",
	"FEf6l6NJtCisUDKY7T5k9J6lSjO7RMaVBLJgQjK3Hll3AnyGvMgwmAWfdZmmd/xt+TgOOkEOzx9QLuwy",
	"mEX9TmDXBdkYq4VcBJtOYJ/nSzDL4+2tBmkgcVuRxfkAwufRaJJM4sk4fTOKw2g45TyBsD+B4RAGYR8x",
	"xuGbJBz0cZLAZDIYpuEbgHEaJSPAQQpJE/d4fIR70wkomkIjD2a/+ADufHnYdIItyuNoQ65KaVvi7Z57",
	"95A3PIq6/cFBLI8wdYLnKwWFuCIwC5RX+Gw1XFlYuF15XG/h4IMx2AaCHu9jkGVOHqJdBp2gNNz6f5Lg",
	"YR+gf72Hb/JN8BwmQldokbSkpFWPKJl7ycC6bLAiR6bSOiuamdANw/4lAufxEDJjwZbmGBraJWoscxZn",
	"KnlMliAk87aEbj9v96JaykTJVOjcxXr/dwoiQ94MctP63/ap8oSccnE1J1OSHHAWLFFaoymU5EIumFU7",
	"x5CzKrv2IU8nYRiGl0BbQXRo3dPdJv2wP7iKwqtw/Dnqz0b9WRT+Lgxnbt9U6RxsMAs4WLyiZGmCGfS/",
	"BUyuuEgF8jn4dP2vJLGzol45Rk6Whs9PcZdyPyBjd59uqjzoMJULS3khJEvAuCql18ZCnFFTEdI0XO6H",
	"4bQ7uUi97mHdHJJ1naaeburs37LO7jjranc5t8/qcw4WjqndLdBWR5KB1rCmEFQ2nUBYzJ3t/2tMg1nw",
	"f71dD+9VDbxXEU8dA7dM4DxKUDwJuZgD5xpNy661CatMXPZtXTAH6XbzJx7d4vjtIB1HyeQ24pM3wzie",
	"jG/DyfgmCm9vk8FtGI2GzeMZtvV0itqLntWh9NYNat3yoyqQqqKA0niGzJQ5ZMXK5mu95zAD6iPwW7cF",
	"s0bTOPXaseaxn6JPWeYx6n36zEDkLvvjNR2E0s1TmL6ZTqfTS9OlspC19VILGUtLyQ3TIIwv1LtPN03l",
	"cUkGJxxH5egf11VI8UatlT5XpjpjVimwGngUjWqMQlpcoKYUy9EYWJxcZft6PwKQZWytSs3itUXDQCNb",
	"aeV8bmjbyZkicbvHw77MOVCIW23WVF9Wl3b5H9FdXhV63dWWJOPBoDuZXlZonezyo89RNBuNX7/LJxpJ",
	"1/gmf9hEqt5RtwyfuaVBfaI37Hj3q+1hn57P6hC1rGxpEmcRscNckfCBl/tgvEXt5Akq1LgCzY9dNBYe",
	"qRP598ZpIFqHCcMwEwtBpGiVZ8hDTryMIphX2CoV/4j8DMaucfovfmR5aSyLkd2XYThIfs9+9Ya/vhKP",
	"l2ZeYd20dkipJPrDefRLlnL7u0EUO4MLQXppdDgdyZdPfHKxnlOa+b/WCbezTLxmdilMrZxaWG8QDaPR",
	"xUD63rilvSZAYrWeG3TBstVSJEsXzW1NVWPmCgzLwFi2nU4OxHVNn+F01h+8Pn2WZt6ck77e+Oui7GxJ",
	"ZE+D0bdCpsrLAGkh8f0xB5G5Dp+qPz6hFnbdtQiUThJywnv98SdmyqJQ2l1caLJeWluYWa9XPe/avCsU",
	"0WUz6p9pTMOsWAoWQ/KIkrNCqyfBSQVkmTuCtJRuuDNMIvJt3uyNdyuM76URFrv3pFIzkaA0rsNWAN//",
	"5Y5dpylqxd6jRA0Z+1jGmUjYB2/Lngbsh+v3Hz9cDbrhb4+cWK1W3YUsu0ovetXqpgeLIiPzLsru0uaZ",
	"6w3CukSoXPphHyIjhFsvaY8n1MZHIeqG3ZC+J50NhaDE74bdgZPldumOu+5BvfrO0HUGZVpGxXc+dsQC",
	"khdKSEssQPqCAtdy6Qh1NF0Iqdu4v37iwSz4hPZ6+8k7L7Cqa863iq+36YJ+ZoWiyETikf7d+Ls53wVf",
	"6pHHl6ibKp9NoSjktEA/DI/d/eufKXhD/+oiWLw6dts3t3oLJOGL0rICNORoUf/IGsJ2l8AcLYjMUFY6",
	"eNHrw3uXCZSWZZA8GvYEmeAMSrtEaauNWKKR05+QGY9r9PPPr4/rE2pKd6fspbJspbSjVTAMnwtMLPIu",
	"IzKojp4aWKFVDHG29n7cy7i0jgEM5XJMplYL5CwDi9oFmbp3meeg18SiaNsyfSflNp29oiI92SP3Fm03",
	"touqcvxQy0DyLTNxwyBJyrzMXEsziqWgW2roptrohnRre05f5ASalyctJ/G9Vr7XylGtUH4vqs5Y96wq",
	"gzpBLxNPeLI2hJedBvWT+y8DMv7DUf5fuzXOJfMGuPYNHDCN4BvQ2chc7brPKDJcuegew/2bW/j83jMK",
	"By3zmMrRLoVc/MZU1xkvO3YCn/OWlL0nqi+VZN68yFiN06xvxleQZUSPO+G9vR9voa47g7qirbqOTTD7",
	"5UuLljtYmPartLRiKrYgPJB7+e0Xo4L2Ilm0E6C7C8Wd9rW6xM5eKX79PnXz8IqcvLuw+M7Hl+XjYThs",
	"mYoVM2WydIPw/z5tf0uRe/jGA26p5LPGl+aIBIXwM17Pf9x7ioLNw+afAQAA//8waT49NCEAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
