// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// set affiliate code for donation
	// (POST /donation/affiliate)
	SetAffiliateCode(ctx echo.Context) error
	// get general donation data
	// (GET /donation/data/)
	DonationData(ctx echo.Context) error
	// get the donation data for the wallet address in question
	// (GET /user/data/{address})
	UserData(ctx echo.Context, address string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SetAffiliateCode converts echo context to params.
func (w *ServerInterfaceWrapper) SetAffiliateCode(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SetAffiliateCode(ctx)
	return err
}

// DonationData converts echo context to params.
func (w *ServerInterfaceWrapper) DonationData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DonationData(ctx)
	return err
}

// UserData converts echo context to params.
func (w *ServerInterfaceWrapper) UserData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserData(ctx, address)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/donation/affiliate", wrapper.SetAffiliateCode)
	router.GET(baseURL+"/donation/data/", wrapper.DonationData)
	router.GET(baseURL+"/user/data/:address", wrapper.UserData)

}

type SetAffiliateCodeRequestObject struct {
	Body *SetAffiliateCodeJSONRequestBody
}

type SetAffiliateCodeResponseObject interface {
	VisitSetAffiliateCodeResponse(w http.ResponseWriter) error
}

type SetAffiliateCode200Response struct {
}

func (response SetAffiliateCode200Response) VisitSetAffiliateCodeResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type SetAffiliateCode400JSONResponse Error

func (response SetAffiliateCode400JSONResponse) VisitSetAffiliateCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SetAffiliateCode401JSONResponse Error

func (response SetAffiliateCode401JSONResponse) VisitSetAffiliateCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type SetAffiliateCode5XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response SetAffiliateCode5XXJSONResponse) VisitSetAffiliateCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DonationDataRequestObject struct {
}

type DonationDataResponseObject interface {
	VisitDonationDataResponse(w http.ResponseWriter) error
}

type DonationData200JSONResponse DonationData

func (response DonationData200JSONResponse) VisitDonationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DonationData400JSONResponse Error

func (response DonationData400JSONResponse) VisitDonationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DonationData401JSONResponse Error

func (response DonationData401JSONResponse) VisitDonationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DonationData5XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DonationData5XXJSONResponse) VisitDonationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UserDataRequestObject struct {
	Address string `json:"address"`
}

type UserDataResponseObject interface {
	VisitUserDataResponse(w http.ResponseWriter) error
}

type UserData200JSONResponse UserData

func (response UserData200JSONResponse) VisitUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UserData400JSONResponse Error

func (response UserData400JSONResponse) VisitUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UserData401JSONResponse Error

func (response UserData401JSONResponse) VisitUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UserData5XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UserData5XXJSONResponse) VisitUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// set affiliate code for donation
	// (POST /donation/affiliate)
	SetAffiliateCode(ctx context.Context, request SetAffiliateCodeRequestObject) (SetAffiliateCodeResponseObject, error)
	// get general donation data
	// (GET /donation/data/)
	DonationData(ctx context.Context, request DonationDataRequestObject) (DonationDataResponseObject, error)
	// get the donation data for the wallet address in question
	// (GET /user/data/{address})
	UserData(ctx context.Context, request UserDataRequestObject) (UserDataResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// SetAffiliateCode operation middleware
func (sh *strictHandler) SetAffiliateCode(ctx echo.Context) error {
	var request SetAffiliateCodeRequestObject

	var body SetAffiliateCodeJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SetAffiliateCode(ctx.Request().Context(), request.(SetAffiliateCodeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SetAffiliateCode")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SetAffiliateCodeResponseObject); ok {
		return validResponse.VisitSetAffiliateCodeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DonationData operation middleware
func (sh *strictHandler) DonationData(ctx echo.Context) error {
	var request DonationDataRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DonationData(ctx.Request().Context(), request.(DonationDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DonationData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DonationDataResponseObject); ok {
		return validResponse.VisitDonationDataResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UserData operation middleware
func (sh *strictHandler) UserData(ctx echo.Context, address string) error {
	var request UserDataRequestObject

	request.Address = address

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserData(ctx.Request().Context(), request.(UserDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserDataResponseObject); ok {
		return validResponse.VisitUserDataResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"PHiIgt3d7j8BAAD//8YdTsiGHwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
