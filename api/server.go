// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// generate new affiliate code
	// (POST /affiliate/code)
	GenerateCode(ctx echo.Context, params GenerateCodeParams) error
	// get general donation data
	// (GET /donation/data)
	DonationData(ctx echo.Context) error
	// is the service alive?
	// (GET /live)
	Alive(ctx echo.Context) error
	// is the service alive and ready to do work?
	// (GET /ready)
	Ready(ctx echo.Context) error
	// get the donation data for the wallet address in question
	// (GET /user/data/{address})
	UserData(ctx echo.Context, address string) error
	// associate a wallet address with an affiliate code
	// (POST /wallet/connection)
	ConnectWallet(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GenerateCode converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateCode(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateCodeParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "delphi-key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("delphi-key")]; found {
		var DelphiKey DelphiKey
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for delphi-key, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "delphi-key", runtime.ParamLocationHeader, valueList[0], &DelphiKey)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter delphi-key: %s", err))
		}

		params.DelphiKey = DelphiKey
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter delphi-key is required, but not found"))
	}
	// ------------- Required header parameter "delphi-ts" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("delphi-ts")]; found {
		var DelphiTs DelphiTs
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for delphi-ts, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "delphi-ts", runtime.ParamLocationHeader, valueList[0], &DelphiTs)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter delphi-ts: %s", err))
		}

		params.DelphiTs = DelphiTs
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter delphi-ts is required, but not found"))
	}
	// ------------- Required header parameter "delphi-signature" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("delphi-signature")]; found {
		var DelphiSignature DelphiSignature
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for delphi-signature, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "delphi-signature", runtime.ParamLocationHeader, valueList[0], &DelphiSignature)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter delphi-signature: %s", err))
		}

		params.DelphiSignature = DelphiSignature
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter delphi-signature is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GenerateCode(ctx, params)
	return err
}

// DonationData converts echo context to params.
func (w *ServerInterfaceWrapper) DonationData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DonationData(ctx)
	return err
}

// Alive converts echo context to params.
func (w *ServerInterfaceWrapper) Alive(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Alive(ctx)
	return err
}

// Ready converts echo context to params.
func (w *ServerInterfaceWrapper) Ready(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Ready(ctx)
	return err
}

// UserData converts echo context to params.
func (w *ServerInterfaceWrapper) UserData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserData(ctx, address)
	return err
}

// ConnectWallet converts echo context to params.
func (w *ServerInterfaceWrapper) ConnectWallet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ConnectWallet(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/affiliate/code", wrapper.GenerateCode)
	router.GET(baseURL+"/donation/data", wrapper.DonationData)
	router.GET(baseURL+"/live", wrapper.Alive)
	router.GET(baseURL+"/ready", wrapper.Ready)
	router.GET(baseURL+"/user/data/:address", wrapper.UserData)
	router.POST(baseURL+"/wallet/connection", wrapper.ConnectWallet)

}

type GenerateCodeRequestObject struct {
	Params GenerateCodeParams
}

type GenerateCodeResponseObject interface {
	VisitGenerateCodeResponse(w http.ResponseWriter) error
}

type GenerateCode200JSONResponse AffiliateCode

func (response GenerateCode200JSONResponse) VisitGenerateCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GenerateCode400JSONResponse Error

func (response GenerateCode400JSONResponse) VisitGenerateCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GenerateCode401JSONResponse Error

func (response GenerateCode401JSONResponse) VisitGenerateCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GenerateCode5XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GenerateCode5XXJSONResponse) VisitGenerateCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DonationDataRequestObject struct {
}

type DonationDataResponseObject interface {
	VisitDonationDataResponse(w http.ResponseWriter) error
}

type DonationData200JSONResponse DonationData

func (response DonationData200JSONResponse) VisitDonationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DonationData400JSONResponse Error

func (response DonationData400JSONResponse) VisitDonationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DonationData401JSONResponse Error

func (response DonationData401JSONResponse) VisitDonationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DonationData5XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DonationData5XXJSONResponse) VisitDonationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AliveRequestObject struct {
}

type AliveResponseObject interface {
	VisitAliveResponse(w http.ResponseWriter) error
}

type Alive200Response struct {
}

func (response Alive200Response) VisitAliveResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ReadyRequestObject struct {
}

type ReadyResponseObject interface {
	VisitReadyResponse(w http.ResponseWriter) error
}

type Ready200Response struct {
}

func (response Ready200Response) VisitReadyResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type Ready503Response struct {
}

func (response Ready503Response) VisitReadyResponse(w http.ResponseWriter) error {
	w.WriteHeader(503)
	return nil
}

type UserDataRequestObject struct {
	Address string `json:"address"`
}

type UserDataResponseObject interface {
	VisitUserDataResponse(w http.ResponseWriter) error
}

type UserData200JSONResponse UserDataResult

func (response UserData200JSONResponse) VisitUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UserData400JSONResponse Error

func (response UserData400JSONResponse) VisitUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UserData401JSONResponse Error

func (response UserData401JSONResponse) VisitUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UserData404Response struct {
}

func (response UserData404Response) VisitUserDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UserData5XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UserData5XXJSONResponse) VisitUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ConnectWalletRequestObject struct {
	Body *ConnectWalletJSONRequestBody
}

type ConnectWalletResponseObject interface {
	VisitConnectWalletResponse(w http.ResponseWriter) error
}

type ConnectWallet200JSONResponse UserDataResult

func (response ConnectWallet200JSONResponse) VisitConnectWalletResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ConnectWallet400JSONResponse Error

func (response ConnectWallet400JSONResponse) VisitConnectWalletResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ConnectWallet401JSONResponse Error

func (response ConnectWallet401JSONResponse) VisitConnectWalletResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ConnectWallet5XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ConnectWallet5XXJSONResponse) VisitConnectWalletResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// generate new affiliate code
	// (POST /affiliate/code)
	GenerateCode(ctx context.Context, request GenerateCodeRequestObject) (GenerateCodeResponseObject, error)
	// get general donation data
	// (GET /donation/data)
	DonationData(ctx context.Context, request DonationDataRequestObject) (DonationDataResponseObject, error)
	// is the service alive?
	// (GET /live)
	Alive(ctx context.Context, request AliveRequestObject) (AliveResponseObject, error)
	// is the service alive and ready to do work?
	// (GET /ready)
	Ready(ctx context.Context, request ReadyRequestObject) (ReadyResponseObject, error)
	// get the donation data for the wallet address in question
	// (GET /user/data/{address})
	UserData(ctx context.Context, request UserDataRequestObject) (UserDataResponseObject, error)
	// associate a wallet address with an affiliate code
	// (POST /wallet/connection)
	ConnectWallet(ctx context.Context, request ConnectWalletRequestObject) (ConnectWalletResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GenerateCode operation middleware
func (sh *strictHandler) GenerateCode(ctx echo.Context, params GenerateCodeParams) error {
	var request GenerateCodeRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GenerateCode(ctx.Request().Context(), request.(GenerateCodeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GenerateCode")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GenerateCodeResponseObject); ok {
		return validResponse.VisitGenerateCodeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DonationData operation middleware
func (sh *strictHandler) DonationData(ctx echo.Context) error {
	var request DonationDataRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DonationData(ctx.Request().Context(), request.(DonationDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DonationData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DonationDataResponseObject); ok {
		return validResponse.VisitDonationDataResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Alive operation middleware
func (sh *strictHandler) Alive(ctx echo.Context) error {
	var request AliveRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Alive(ctx.Request().Context(), request.(AliveRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Alive")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AliveResponseObject); ok {
		return validResponse.VisitAliveResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Ready operation middleware
func (sh *strictHandler) Ready(ctx echo.Context) error {
	var request ReadyRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Ready(ctx.Request().Context(), request.(ReadyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Ready")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ReadyResponseObject); ok {
		return validResponse.VisitReadyResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UserData operation middleware
func (sh *strictHandler) UserData(ctx echo.Context, address string) error {
	var request UserDataRequestObject

	request.Address = address

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserData(ctx.Request().Context(), request.(UserDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserDataResponseObject); ok {
		return validResponse.VisitUserDataResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ConnectWallet operation middleware
func (sh *strictHandler) ConnectWallet(ctx echo.Context) error {
	var request ConnectWalletRequestObject

	var body ConnectWalletJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ConnectWallet(ctx.Request().Context(), request.(ConnectWalletRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ConnectWallet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ConnectWalletResponseObject); ok {
		return validResponse.VisitConnectWalletResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"XYMrAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
