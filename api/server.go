// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// generate new affiliate code
	// (POST /affiliate/code)
	GenerateCode(ctx echo.Context, params GenerateCodeParams) error
	// get general donation data
	// (GET /donation/data)
	DonationData(ctx echo.Context) error
	// is the service alive?
	// (GET /live)
	Alive(ctx echo.Context) error
	// is the service alive and ready to do work?
	// (GET /ready)
	Ready(ctx echo.Context) error
	// get the donation data for the wallet address in question
	// (GET /user/data/{address})
	UserData(ctx echo.Context, address string) error
	// what is the version of this service?
	// (GET /version)
	Version(ctx echo.Context) error
	// associate a wallet address with an affiliate code
	// (POST /wallet/connection)
	ConnectWallet(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GenerateCode converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateCode(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateCodeParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "delphi-key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("delphi-key")]; found {
		var DelphiKey DelphiKey
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for delphi-key, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "delphi-key", runtime.ParamLocationHeader, valueList[0], &DelphiKey)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter delphi-key: %s", err))
		}

		params.DelphiKey = DelphiKey
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter delphi-key is required, but not found"))
	}
	// ------------- Required header parameter "delphi-ts" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("delphi-ts")]; found {
		var DelphiTs DelphiTs
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for delphi-ts, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "delphi-ts", runtime.ParamLocationHeader, valueList[0], &DelphiTs)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter delphi-ts: %s", err))
		}

		params.DelphiTs = DelphiTs
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter delphi-ts is required, but not found"))
	}
	// ------------- Required header parameter "delphi-signature" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("delphi-signature")]; found {
		var DelphiSignature DelphiSignature
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for delphi-signature, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "delphi-signature", runtime.ParamLocationHeader, valueList[0], &DelphiSignature)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter delphi-signature: %s", err))
		}

		params.DelphiSignature = DelphiSignature
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter delphi-signature is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GenerateCode(ctx, params)
	return err
}

// DonationData converts echo context to params.
func (w *ServerInterfaceWrapper) DonationData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DonationData(ctx)
	return err
}

// Alive converts echo context to params.
func (w *ServerInterfaceWrapper) Alive(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Alive(ctx)
	return err
}

// Ready converts echo context to params.
func (w *ServerInterfaceWrapper) Ready(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Ready(ctx)
	return err
}

// UserData converts echo context to params.
func (w *ServerInterfaceWrapper) UserData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserData(ctx, address)
	return err
}

// Version converts echo context to params.
func (w *ServerInterfaceWrapper) Version(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Version(ctx)
	return err
}

// ConnectWallet converts echo context to params.
func (w *ServerInterfaceWrapper) ConnectWallet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ConnectWallet(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/affiliate/code", wrapper.GenerateCode)
	router.GET(baseURL+"/donation/data", wrapper.DonationData)
	router.GET(baseURL+"/live", wrapper.Alive)
	router.GET(baseURL+"/ready", wrapper.Ready)
	router.GET(baseURL+"/user/data/:address", wrapper.UserData)
	router.GET(baseURL+"/version", wrapper.Version)
	router.POST(baseURL+"/wallet/connection", wrapper.ConnectWallet)

}

type GenerateCodeRequestObject struct {
	Params GenerateCodeParams
}

type GenerateCodeResponseObject interface {
	VisitGenerateCodeResponse(w http.ResponseWriter) error
}

type GenerateCode200JSONResponse AffiliateCode

func (response GenerateCode200JSONResponse) VisitGenerateCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GenerateCode400JSONResponse Error

func (response GenerateCode400JSONResponse) VisitGenerateCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GenerateCode401Response struct {
}

func (response GenerateCode401Response) VisitGenerateCodeResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GenerateCode5XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GenerateCode5XXJSONResponse) VisitGenerateCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DonationDataRequestObject struct {
}

type DonationDataResponseObject interface {
	VisitDonationDataResponse(w http.ResponseWriter) error
}

type DonationData200JSONResponse DonationData

func (response DonationData200JSONResponse) VisitDonationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DonationData400JSONResponse Error

func (response DonationData400JSONResponse) VisitDonationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DonationData5XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DonationData5XXJSONResponse) VisitDonationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AliveRequestObject struct {
}

type AliveResponseObject interface {
	VisitAliveResponse(w http.ResponseWriter) error
}

type Alive200Response struct {
}

func (response Alive200Response) VisitAliveResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ReadyRequestObject struct {
}

type ReadyResponseObject interface {
	VisitReadyResponse(w http.ResponseWriter) error
}

type Ready200Response struct {
}

func (response Ready200Response) VisitReadyResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type Ready503Response struct {
}

func (response Ready503Response) VisitReadyResponse(w http.ResponseWriter) error {
	w.WriteHeader(503)
	return nil
}

type UserDataRequestObject struct {
	Address string `json:"address"`
}

type UserDataResponseObject interface {
	VisitUserDataResponse(w http.ResponseWriter) error
}

type UserData200JSONResponse UserDataResult

func (response UserData200JSONResponse) VisitUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UserData400JSONResponse Error

func (response UserData400JSONResponse) VisitUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UserData404Response struct {
}

func (response UserData404Response) VisitUserDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UserData5XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UserData5XXJSONResponse) VisitUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type VersionRequestObject struct {
}

type VersionResponseObject interface {
	VisitVersionResponse(w http.ResponseWriter) error
}

type Version200TextResponse string

func (response Version200TextResponse) VisitVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(200)

	_, err := w.Write([]byte(response))
	return err
}

type ConnectWalletRequestObject struct {
	Body *ConnectWalletJSONRequestBody
}

type ConnectWalletResponseObject interface {
	VisitConnectWalletResponse(w http.ResponseWriter) error
}

type ConnectWallet200JSONResponse UserDataResult

func (response ConnectWallet200JSONResponse) VisitConnectWalletResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ConnectWallet400JSONResponse Error

func (response ConnectWallet400JSONResponse) VisitConnectWalletResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ConnectWallet404Response struct {
}

func (response ConnectWallet404Response) VisitConnectWalletResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ConnectWallet5XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ConnectWallet5XXJSONResponse) VisitConnectWalletResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// generate new affiliate code
	// (POST /affiliate/code)
	GenerateCode(ctx context.Context, request GenerateCodeRequestObject) (GenerateCodeResponseObject, error)
	// get general donation data
	// (GET /donation/data)
	DonationData(ctx context.Context, request DonationDataRequestObject) (DonationDataResponseObject, error)
	// is the service alive?
	// (GET /live)
	Alive(ctx context.Context, request AliveRequestObject) (AliveResponseObject, error)
	// is the service alive and ready to do work?
	// (GET /ready)
	Ready(ctx context.Context, request ReadyRequestObject) (ReadyResponseObject, error)
	// get the donation data for the wallet address in question
	// (GET /user/data/{address})
	UserData(ctx context.Context, request UserDataRequestObject) (UserDataResponseObject, error)
	// what is the version of this service?
	// (GET /version)
	Version(ctx context.Context, request VersionRequestObject) (VersionResponseObject, error)
	// associate a wallet address with an affiliate code
	// (POST /wallet/connection)
	ConnectWallet(ctx context.Context, request ConnectWalletRequestObject) (ConnectWalletResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GenerateCode operation middleware
func (sh *strictHandler) GenerateCode(ctx echo.Context, params GenerateCodeParams) error {
	var request GenerateCodeRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GenerateCode(ctx.Request().Context(), request.(GenerateCodeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GenerateCode")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GenerateCodeResponseObject); ok {
		return validResponse.VisitGenerateCodeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DonationData operation middleware
func (sh *strictHandler) DonationData(ctx echo.Context) error {
	var request DonationDataRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DonationData(ctx.Request().Context(), request.(DonationDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DonationData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DonationDataResponseObject); ok {
		return validResponse.VisitDonationDataResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Alive operation middleware
func (sh *strictHandler) Alive(ctx echo.Context) error {
	var request AliveRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Alive(ctx.Request().Context(), request.(AliveRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Alive")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AliveResponseObject); ok {
		return validResponse.VisitAliveResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Ready operation middleware
func (sh *strictHandler) Ready(ctx echo.Context) error {
	var request ReadyRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Ready(ctx.Request().Context(), request.(ReadyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Ready")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ReadyResponseObject); ok {
		return validResponse.VisitReadyResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UserData operation middleware
func (sh *strictHandler) UserData(ctx echo.Context, address string) error {
	var request UserDataRequestObject

	request.Address = address

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserData(ctx.Request().Context(), request.(UserDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserDataResponseObject); ok {
		return validResponse.VisitUserDataResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Version operation middleware
func (sh *strictHandler) Version(ctx echo.Context) error {
	var request VersionRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Version(ctx.Request().Context(), request.(VersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Version")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(VersionResponseObject); ok {
		return validResponse.VisitVersionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ConnectWallet operation middleware
func (sh *strictHandler) ConnectWallet(ctx echo.Context) error {
	var request ConnectWalletRequestObject

	var body ConnectWalletJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ConnectWallet(ctx.Request().Context(), request.(ConnectWalletRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ConnectWallet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ConnectWalletResponseObject); ok {
		return validResponse.VisitConnectWalletResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"3H64/U8AAAD//yzxVnueKwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
