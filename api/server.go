// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// generate new affiliate code
	// (POST /affiliate/code)
	GenerateCode(ctx echo.Context, params GenerateCodeParams) error
	// associate a wallet address with an affiliate code
	// (POST /affiliate/connection)
	ConnectWallet(ctx echo.Context) error
	// get general donation data
	// (GET /donation/data)
	DonationData(ctx echo.Context) error
	// is the service alive?
	// (GET /live)
	Alive(ctx echo.Context) error
	// is the service alive and ready to do work?
	// (GET /ready)
	Ready(ctx echo.Context) error
	// get the donation data for the wallet address in question
	// (GET /user/data/{address})
	UserData(ctx echo.Context, address string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GenerateCode converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateCode(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateCodeParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "delphi-key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("delphi-key")]; found {
		var DelphiKey DelphiKey
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for delphi-key, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "delphi-key", runtime.ParamLocationHeader, valueList[0], &DelphiKey)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter delphi-key: %s", err))
		}

		params.DelphiKey = DelphiKey
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter delphi-key is required, but not found"))
	}
	// ------------- Required header parameter "delphi-ts" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("delphi-ts")]; found {
		var DelphiTs DelphiTs
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for delphi-ts, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "delphi-ts", runtime.ParamLocationHeader, valueList[0], &DelphiTs)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter delphi-ts: %s", err))
		}

		params.DelphiTs = DelphiTs
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter delphi-ts is required, but not found"))
	}
	// ------------- Required header parameter "delphi-signature" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("delphi-signature")]; found {
		var DelphiSignature DelphiSignature
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for delphi-signature, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "delphi-signature", runtime.ParamLocationHeader, valueList[0], &DelphiSignature)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter delphi-signature: %s", err))
		}

		params.DelphiSignature = DelphiSignature
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter delphi-signature is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GenerateCode(ctx, params)
	return err
}

// ConnectWallet converts echo context to params.
func (w *ServerInterfaceWrapper) ConnectWallet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ConnectWallet(ctx)
	return err
}

// DonationData converts echo context to params.
func (w *ServerInterfaceWrapper) DonationData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DonationData(ctx)
	return err
}

// Alive converts echo context to params.
func (w *ServerInterfaceWrapper) Alive(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Alive(ctx)
	return err
}

// Ready converts echo context to params.
func (w *ServerInterfaceWrapper) Ready(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Ready(ctx)
	return err
}

// UserData converts echo context to params.
func (w *ServerInterfaceWrapper) UserData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserData(ctx, address)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/affiliate/code", wrapper.GenerateCode)
	router.POST(baseURL+"/affiliate/connection", wrapper.ConnectWallet)
	router.GET(baseURL+"/donation/data", wrapper.DonationData)
	router.GET(baseURL+"/live", wrapper.Alive)
	router.GET(baseURL+"/ready", wrapper.Ready)
	router.GET(baseURL+"/user/data/:address", wrapper.UserData)

}

type GenerateCodeRequestObject struct {
	Params GenerateCodeParams
}

type GenerateCodeResponseObject interface {
	VisitGenerateCodeResponse(w http.ResponseWriter) error
}

type GenerateCode200JSONResponse AffiliateCode

func (response GenerateCode200JSONResponse) VisitGenerateCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GenerateCode400JSONResponse Error

func (response GenerateCode400JSONResponse) VisitGenerateCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GenerateCode401JSONResponse Error

func (response GenerateCode401JSONResponse) VisitGenerateCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GenerateCode5XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GenerateCode5XXJSONResponse) VisitGenerateCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ConnectWalletRequestObject struct {
	Body *ConnectWalletJSONRequestBody
}

type ConnectWalletResponseObject interface {
	VisitConnectWalletResponse(w http.ResponseWriter) error
}

type ConnectWallet200Response struct {
}

func (response ConnectWallet200Response) VisitConnectWalletResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ConnectWallet400JSONResponse Error

func (response ConnectWallet400JSONResponse) VisitConnectWalletResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ConnectWallet401JSONResponse Error

func (response ConnectWallet401JSONResponse) VisitConnectWalletResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ConnectWallet5XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ConnectWallet5XXJSONResponse) VisitConnectWalletResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DonationDataRequestObject struct {
}

type DonationDataResponseObject interface {
	VisitDonationDataResponse(w http.ResponseWriter) error
}

type DonationData200JSONResponse DonationData

func (response DonationData200JSONResponse) VisitDonationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DonationData400JSONResponse Error

func (response DonationData400JSONResponse) VisitDonationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DonationData401JSONResponse Error

func (response DonationData401JSONResponse) VisitDonationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DonationData5XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DonationData5XXJSONResponse) VisitDonationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AliveRequestObject struct {
}

type AliveResponseObject interface {
	VisitAliveResponse(w http.ResponseWriter) error
}

type Alive200Response struct {
}

func (response Alive200Response) VisitAliveResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ReadyRequestObject struct {
}

type ReadyResponseObject interface {
	VisitReadyResponse(w http.ResponseWriter) error
}

type Ready200Response struct {
}

func (response Ready200Response) VisitReadyResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type Ready503Response struct {
}

func (response Ready503Response) VisitReadyResponse(w http.ResponseWriter) error {
	w.WriteHeader(503)
	return nil
}

type UserDataRequestObject struct {
	Address string `json:"address"`
}

type UserDataResponseObject interface {
	VisitUserDataResponse(w http.ResponseWriter) error
}

type UserData200JSONResponse UserDataResult

func (response UserData200JSONResponse) VisitUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UserData400JSONResponse Error

func (response UserData400JSONResponse) VisitUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UserData401JSONResponse Error

func (response UserData401JSONResponse) VisitUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UserData404Response struct {
}

func (response UserData404Response) VisitUserDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UserData5XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UserData5XXJSONResponse) VisitUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// generate new affiliate code
	// (POST /affiliate/code)
	GenerateCode(ctx context.Context, request GenerateCodeRequestObject) (GenerateCodeResponseObject, error)
	// associate a wallet address with an affiliate code
	// (POST /affiliate/connection)
	ConnectWallet(ctx context.Context, request ConnectWalletRequestObject) (ConnectWalletResponseObject, error)
	// get general donation data
	// (GET /donation/data)
	DonationData(ctx context.Context, request DonationDataRequestObject) (DonationDataResponseObject, error)
	// is the service alive?
	// (GET /live)
	Alive(ctx context.Context, request AliveRequestObject) (AliveResponseObject, error)
	// is the service alive and ready to do work?
	// (GET /ready)
	Ready(ctx context.Context, request ReadyRequestObject) (ReadyResponseObject, error)
	// get the donation data for the wallet address in question
	// (GET /user/data/{address})
	UserData(ctx context.Context, request UserDataRequestObject) (UserDataResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GenerateCode operation middleware
func (sh *strictHandler) GenerateCode(ctx echo.Context, params GenerateCodeParams) error {
	var request GenerateCodeRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GenerateCode(ctx.Request().Context(), request.(GenerateCodeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GenerateCode")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GenerateCodeResponseObject); ok {
		return validResponse.VisitGenerateCodeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ConnectWallet operation middleware
func (sh *strictHandler) ConnectWallet(ctx echo.Context) error {
	var request ConnectWalletRequestObject

	var body ConnectWalletJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ConnectWallet(ctx.Request().Context(), request.(ConnectWalletRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ConnectWallet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ConnectWalletResponseObject); ok {
		return validResponse.VisitConnectWalletResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DonationData operation middleware
func (sh *strictHandler) DonationData(ctx echo.Context) error {
	var request DonationDataRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DonationData(ctx.Request().Context(), request.(DonationDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DonationData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DonationDataResponseObject); ok {
		return validResponse.VisitDonationDataResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Alive operation middleware
func (sh *strictHandler) Alive(ctx echo.Context) error {
	var request AliveRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Alive(ctx.Request().Context(), request.(AliveRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Alive")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AliveResponseObject); ok {
		return validResponse.VisitAliveResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Ready operation middleware
func (sh *strictHandler) Ready(ctx echo.Context) error {
	var request ReadyRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Ready(ctx.Request().Context(), request.(ReadyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Ready")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ReadyResponseObject); ok {
		return validResponse.VisitReadyResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UserData operation middleware
func (sh *strictHandler) UserData(ctx echo.Context, address string) error {
	var request UserDataRequestObject

	request.Address = address

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserData(ctx.Request().Context(), request.(UserDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserDataResponseObject); ok {
		return validResponse.VisitUserDataResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xa/2/buhH/VwhtwFrMseWvsf0wbG3TFMWK12JNsQe8BH4n6WRxpkiNpOx4hf/3gaQk",
	"W7acpImzDg/9KbF1Jj/37XN3pL56oUgzwZFr5U2/ehlISFGjtJ8iZFlCZwtcu08qlDTTVHBv6gFZ4LoD",
	"USRRKfIiywNGw5dey8NbSDOG3tTzby/eRt1LHL3ux6NuOL7sRuPzQRCMR5f+eHTR9S8vw/6l3x0OvJZH",
	"zaIJQoTSa3kcUrOCA3BmALQ8if/OqcTIm2qZY8tTYYIpGGR6nRlppSXlc2+zaZXIFZ1z0LnEQ/zVIyKW",
	"KIlOkGSgkxbRNEWlIc0I8IgEIlrfg267yaMwanUILgTGDKgKyguepwFKImKSUsaowlDwSBFFeYjkC6e3",
	"BDMRJi/J2RmhPGR5hNE114JkEpfINZGYMVgT0BrChfqJpLnShAtNAiSCRdYEwMmQFEtf811fdkeT8/Px",
	"+ah33u8O7zaHVt9kh0350JoB4pgyChpnoYis1zIpMpSa4pHne1FZPifmOZkjRwkaIxIL52MDDJWmfE5W",
	"xsiaFCFc19d7h/95v5hjHsiPC/pxaSI0hdsPyOc6MeZo7SnS8m7PBGT0zOw7R36Gt1rCmYa5c29gvGog",
	"G4WbXB6Bxo5xOAFNVgkNE4t3T6EVKAMYoxrYnt/rn3X9M3945U+mvf606//Z96e+77W8WMgUdLHBmdmg",
	"rkq/9yhVJBqzzkBbhZwpZ4UpG9xS0ISIrVKF5XUCunQIRg3qPp5NdhQcPErBUhUboNto/nVf1dZ+SFrv",
	"3mxaXig4x9AYYFbo+NRwrpnjKlnD/G3wcx6/ZWu6PD9pgD7Bn4XaexH6f+K8A1/tKWr8FgkOTs0Db6Ui",
	"57rBGvZ7Yn+4p3e33eufwjPF1kYfUAqbQJivdzHwPDUqo068lperSLs/oXezC9A93sE3fhQ8i8mgyyQN",
	"GwJZiwVyYh8afjNBY7lOxKSydy1e2r7fO4XhHB5bZTTovCGWUScoMU9JwES4CBOgnDjZMrx3ERZWzXko",
	"eExlam29+38MlGFUN3Jd+sk6FZrYSmLsqo6GpFHASpBQSIkqEzwypU+LrWIYkSK6diFPxr5v68eT0RYQ",
	"t3WvoW6Nrrq96bD3/HXL+nhmV7OAbmcJqKQhXiVwBZa9iZGo+ocyFgjlxHUS+5F7OxyOw3EwHsXnw8Dv",
	"DiZRFILfG8NgAH2/hxjg4Dz0+z0chzAe9wexfw4wirvhELAfQ1jXc/Q4oxeKGSVzFc2OUZew/wAjXz5f",
	"FGHQIiKl2oQF5SQEZZPUPFYaAmYqEeVqr/3wJ+3xSdJ1B+sheZdR6timCv6SdLburJK9Ksal22YRaDhk",
	"drtAUxpxAlLC2pigkGl5VGNqZf8oMfam3h862xmqU/SynYJ3KhvYZTyrUYh0Sfn8eHWtRMre1EZfqYJ6",
	"psJaUOS9mlWmdNI1Zi3pUWRosiKDXDmCZELtk2Ihc1fp2Y+AygVu6yZjVmhqXq8Uq7v9GHtuh62SPRnQ",
	"1EZ/sDaOELLuhcn5ZDKZnJothQbWVEo1MBLnZvyTQJVL1C+fL+qNxykJ3OA4SEf3dZWFxt4opZCHZm7u",
	"ba3wQV/bNeNlgZFyjXOUJsRSVArmR1cpH+9aABgja5FLEqw1KgISyUoKq/OuSXr3Rl0BsdzjZrfL2WsQ",
	"y9as3nxpmevku7Rdril0bVdTkIz6/fZ4cto+62iRH151u9Ph6H88nO4XkaJ2VCXDRW6uUB6pDU88cqDq",
	"Ox40SFyBjBoOvzQsTH1xz5XtbIwJCFUEGZ1TQ3VaON7bZ7rT1PlZga1ozRcYPYCHK5zuF8UpVoDkOvf9",
	"fvgX8psT/O2Z2DlXswLrprHuccHRlaCFWzLn5f+19N8KnAjSffPAcUve7/HxySpJrmbfVt/KASVYu0wq",
	"+6EGLut3B93hyUC6ivdNJ3VlThWz4woUYaA0SUVEY/rdT+xyNSuRNBLjXjmvkrIikVpnVfHlTKLKWcPR",
	"1rZdvbOr3u1qH9RYV8N4Q29dY/G7FtkK7pthF89W6saai/JYuH6GawhdoU+BMtuqxOJvS5RUr9saId2e",
	"ir/69J6oPMuEtAcw0kgnWmdq2ukU37d12qbCs1cCu3a6MvOmPVQnAYQL5BHJpFjSyLQzjNmoi3Nup1RF",
	"OGJUpsrOnLrC4JorqrFtCw+jIXJly1gB8N3PX8irOEYpyDtbuxj5ZC9zyAcnS5Z98uLVu08fzvpt/+WB",
	"EqvVqj3neVvIeadYXXVgnjEj3kbeTnTKrLeoZtt7AvJiFyIxCEstzR5LlMpZodv22775vRkYIKMm19t+",
	"u2/nC53YgOlURbhT3RsI1TDvvnF2M6THo0xQrg3plTWbAOG42juEtmYzkW3Bvo9szXbyb1xnuHtp9mtz",
	"4G1FOjuXapvWQ6XtoPVQ4e2F1ObGRLfKhHGKsUbP98sIRnceAFnGaGh16/xLuWPP7W3NXUm01xhtNgcB",
	"/PHvxm+DE+7pJoyGrV6DGYOyXJPKHj+R2nCwzZ0INVCmTEJYeN3nh/eGUeSaMAgXiiyB0YhArhPkutiI",
	"hBIj8xGYcriGv/zy/Lg+ozSZZqcjLjRZCWmLGCiCt5k9x2+Tq+29mWkXMikCCNja6XHNg1xb8lEmlQIj",
	"qiXFiDDQKK2RTa+UpynItTf1qmQ7TDUrWcvl8grlWzMalBIhdSldb7/JiuqEAL/m96b5G7f9P+3vi0tN",
	"VPq1iNYn80zDLdGmqM2Hafsju35k1z3ZdX/gN+ZcWYs7Zfc0b7pjmqO7unHncPb9iKIHiRSBMMzTnNl+",
	"XQkSg2xIqYtinwuzzTPWpvp574/S9CN5HlaadNELsm0DXY0JHUaXeDQ3qJupFcqlveQ0wn89iP9Xdo2H",
	"snsNXPMGFphEcCXpwchs7tqfGctEwlr3EO4/7MIPL0ZDv99w2CRS1Anl8z+p4gT2fsWO4LPamrHM8lTn",
	"a0Ftm3sZq+bN6jJvjyB3rvQaqOuLQlnQ1l7Dfzi17S1s9isOCgQRgQbqgFzzJ74vZwag7ai5vQM5/vrV",
	"3VdAzzovHJwZ/KDl09LywB80nPwJovIwIdU7Mb9v+n5MshdvITrADRn9oAOL+qEIZNSd6hQzeWfZ9TY3",
	"m/8GAAD//0agWvdvKwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
