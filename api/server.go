// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// set affiliate code for donation
	// (POST /donation/affiliate)
	SetAffiliateCode(ctx echo.Context) error
	// get general donation data
	// (GET /donation/data/)
	DonationData(ctx echo.Context) error
	// get the donation data for the wallet address in question
	// (GET /user/data/{address})
	UserData(ctx echo.Context, address string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SetAffiliateCode converts echo context to params.
func (w *ServerInterfaceWrapper) SetAffiliateCode(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SetAffiliateCode(ctx)
	return err
}

// DonationData converts echo context to params.
func (w *ServerInterfaceWrapper) DonationData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DonationData(ctx)
	return err
}

// UserData converts echo context to params.
func (w *ServerInterfaceWrapper) UserData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserData(ctx, address)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/donation/affiliate", wrapper.SetAffiliateCode)
	router.GET(baseURL+"/donation/data/", wrapper.DonationData)
	router.GET(baseURL+"/user/data/:address", wrapper.UserData)

}

type SetAffiliateCodeRequestObject struct {
	Body *SetAffiliateCodeJSONRequestBody
}

type SetAffiliateCodeResponseObject interface {
	VisitSetAffiliateCodeResponse(w http.ResponseWriter) error
}

type SetAffiliateCode200Response struct {
}

func (response SetAffiliateCode200Response) VisitSetAffiliateCodeResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type SetAffiliateCode400JSONResponse Error

func (response SetAffiliateCode400JSONResponse) VisitSetAffiliateCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SetAffiliateCode401JSONResponse Error

func (response SetAffiliateCode401JSONResponse) VisitSetAffiliateCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type SetAffiliateCode5XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response SetAffiliateCode5XXJSONResponse) VisitSetAffiliateCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DonationDataRequestObject struct {
}

type DonationDataResponseObject interface {
	VisitDonationDataResponse(w http.ResponseWriter) error
}

type DonationData200JSONResponse DonationData

func (response DonationData200JSONResponse) VisitDonationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DonationData400JSONResponse Error

func (response DonationData400JSONResponse) VisitDonationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DonationData401JSONResponse Error

func (response DonationData401JSONResponse) VisitDonationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DonationData5XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DonationData5XXJSONResponse) VisitDonationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UserDataRequestObject struct {
	Address string `json:"address"`
}

type UserDataResponseObject interface {
	VisitUserDataResponse(w http.ResponseWriter) error
}

type UserData200JSONResponse UserData

func (response UserData200JSONResponse) VisitUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UserData400JSONResponse Error

func (response UserData400JSONResponse) VisitUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UserData401JSONResponse Error

func (response UserData401JSONResponse) VisitUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UserData5XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UserData5XXJSONResponse) VisitUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// set affiliate code for donation
	// (POST /donation/affiliate)
	SetAffiliateCode(ctx context.Context, request SetAffiliateCodeRequestObject) (SetAffiliateCodeResponseObject, error)
	// get general donation data
	// (GET /donation/data/)
	DonationData(ctx context.Context, request DonationDataRequestObject) (DonationDataResponseObject, error)
	// get the donation data for the wallet address in question
	// (GET /user/data/{address})
	UserData(ctx context.Context, request UserDataRequestObject) (UserDataResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// SetAffiliateCode operation middleware
func (sh *strictHandler) SetAffiliateCode(ctx echo.Context) error {
	var request SetAffiliateCodeRequestObject

	var body SetAffiliateCodeJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SetAffiliateCode(ctx.Request().Context(), request.(SetAffiliateCodeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SetAffiliateCode")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SetAffiliateCodeResponseObject); ok {
		return validResponse.VisitSetAffiliateCodeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DonationData operation middleware
func (sh *strictHandler) DonationData(ctx echo.Context) error {
	var request DonationDataRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DonationData(ctx.Request().Context(), request.(DonationDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DonationData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DonationDataResponseObject); ok {
		return validResponse.VisitDonationDataResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UserData operation middleware
func (sh *strictHandler) UserData(ctx echo.Context, address string) error {
	var request UserDataRequestObject

	request.Address = address

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserData(ctx.Request().Context(), request.(UserDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserDataResponseObject); ok {
		return validResponse.VisitUserDataResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"4DEKtnfb/wQAAP//bgGWMy8fAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
