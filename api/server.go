// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// set affiliate code for donation
	// (POST /donation/affiliate)
	SetAffiliateCode(ctx echo.Context) error
	// get general donation data
	// (GET /donation/data/)
	DonationData(ctx echo.Context) error
	// is the service alive?
	// (GET /live)
	Alive(ctx echo.Context) error
	// is the service alive and ready to do work?
	// (GET /ready)
	Ready(ctx echo.Context) error
	// get the donation data for the wallet address in question
	// (GET /user/data/{address})
	UserData(ctx echo.Context, address string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SetAffiliateCode converts echo context to params.
func (w *ServerInterfaceWrapper) SetAffiliateCode(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SetAffiliateCode(ctx)
	return err
}

// DonationData converts echo context to params.
func (w *ServerInterfaceWrapper) DonationData(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DonationData(ctx)
	return err
}

// Alive converts echo context to params.
func (w *ServerInterfaceWrapper) Alive(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Alive(ctx)
	return err
}

// Ready converts echo context to params.
func (w *ServerInterfaceWrapper) Ready(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Ready(ctx)
	return err
}

// UserData converts echo context to params.
func (w *ServerInterfaceWrapper) UserData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserData(ctx, address)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/donation/affiliate", wrapper.SetAffiliateCode)
	router.GET(baseURL+"/donation/data/", wrapper.DonationData)
	router.GET(baseURL+"/live", wrapper.Alive)
	router.GET(baseURL+"/ready", wrapper.Ready)
	router.GET(baseURL+"/user/data/:address", wrapper.UserData)

}

type SetAffiliateCodeRequestObject struct {
	Body *SetAffiliateCodeJSONRequestBody
}

type SetAffiliateCodeResponseObject interface {
	VisitSetAffiliateCodeResponse(w http.ResponseWriter) error
}

type SetAffiliateCode200Response struct {
}

func (response SetAffiliateCode200Response) VisitSetAffiliateCodeResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type SetAffiliateCode400JSONResponse Error

func (response SetAffiliateCode400JSONResponse) VisitSetAffiliateCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SetAffiliateCode401JSONResponse Error

func (response SetAffiliateCode401JSONResponse) VisitSetAffiliateCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type SetAffiliateCode5XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response SetAffiliateCode5XXJSONResponse) VisitSetAffiliateCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DonationDataRequestObject struct {
}

type DonationDataResponseObject interface {
	VisitDonationDataResponse(w http.ResponseWriter) error
}

type DonationData200JSONResponse DonationData

func (response DonationData200JSONResponse) VisitDonationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DonationData400JSONResponse Error

func (response DonationData400JSONResponse) VisitDonationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DonationData401JSONResponse Error

func (response DonationData401JSONResponse) VisitDonationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DonationData5XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DonationData5XXJSONResponse) VisitDonationDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type AliveRequestObject struct {
}

type AliveResponseObject interface {
	VisitAliveResponse(w http.ResponseWriter) error
}

type Alive200Response struct {
}

func (response Alive200Response) VisitAliveResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ReadyRequestObject struct {
}

type ReadyResponseObject interface {
	VisitReadyResponse(w http.ResponseWriter) error
}

type Ready200Response struct {
}

func (response Ready200Response) VisitReadyResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type Ready503Response struct {
}

func (response Ready503Response) VisitReadyResponse(w http.ResponseWriter) error {
	w.WriteHeader(503)
	return nil
}

type UserDataRequestObject struct {
	Address string `json:"address"`
}

type UserDataResponseObject interface {
	VisitUserDataResponse(w http.ResponseWriter) error
}

type UserData200JSONResponse UserData

func (response UserData200JSONResponse) VisitUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UserData400JSONResponse Error

func (response UserData400JSONResponse) VisitUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UserData401JSONResponse Error

func (response UserData401JSONResponse) VisitUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UserData404Response struct {
}

func (response UserData404Response) VisitUserDataResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UserData5XXJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UserData5XXJSONResponse) VisitUserDataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// set affiliate code for donation
	// (POST /donation/affiliate)
	SetAffiliateCode(ctx context.Context, request SetAffiliateCodeRequestObject) (SetAffiliateCodeResponseObject, error)
	// get general donation data
	// (GET /donation/data/)
	DonationData(ctx context.Context, request DonationDataRequestObject) (DonationDataResponseObject, error)
	// is the service alive?
	// (GET /live)
	Alive(ctx context.Context, request AliveRequestObject) (AliveResponseObject, error)
	// is the service alive and ready to do work?
	// (GET /ready)
	Ready(ctx context.Context, request ReadyRequestObject) (ReadyResponseObject, error)
	// get the donation data for the wallet address in question
	// (GET /user/data/{address})
	UserData(ctx context.Context, request UserDataRequestObject) (UserDataResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// SetAffiliateCode operation middleware
func (sh *strictHandler) SetAffiliateCode(ctx echo.Context) error {
	var request SetAffiliateCodeRequestObject

	var body SetAffiliateCodeJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SetAffiliateCode(ctx.Request().Context(), request.(SetAffiliateCodeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SetAffiliateCode")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SetAffiliateCodeResponseObject); ok {
		return validResponse.VisitSetAffiliateCodeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DonationData operation middleware
func (sh *strictHandler) DonationData(ctx echo.Context) error {
	var request DonationDataRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DonationData(ctx.Request().Context(), request.(DonationDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DonationData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DonationDataResponseObject); ok {
		return validResponse.VisitDonationDataResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Alive operation middleware
func (sh *strictHandler) Alive(ctx echo.Context) error {
	var request AliveRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Alive(ctx.Request().Context(), request.(AliveRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Alive")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AliveResponseObject); ok {
		return validResponse.VisitAliveResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Ready operation middleware
func (sh *strictHandler) Ready(ctx echo.Context) error {
	var request ReadyRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Ready(ctx.Request().Context(), request.(ReadyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Ready")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ReadyResponseObject); ok {
		return validResponse.VisitReadyResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UserData operation middleware
func (sh *strictHandler) UserData(ctx echo.Context, address string) error {
	var request UserDataRequestObject

	request.Address = address

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserData(ctx.Request().Context(), request.(UserDataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserData")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserDataResponseObject); ok {
		return validResponse.VisitUserDataResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZf2/byNH+Kgu+L9ArKkukfkXSoWiduA4ODdqgiYEDzoZuSA6lrclddndpWQj03YvZ",
	"JSlSomI1lVG0yF+RyeHOM7Mzzzy7+eJFMsulQGG0t/ji6WiNGdifkCQ85WBwqfAfBWpDD3Mlc1SGozWJ",
	"ZIz0b4w6Ujw3XApvsf+Q0XuWSMXMGlksBZAF44LZ9ci65+EzZHmK3sL7rIokuYvfFo9Tr+dl8PwBxcqs",
	"vUUw7Hlmm5ONNoqLlbfreeZ5uQa9PnZvFAgNkXVFFucD8J8nk1k0C2fT5M0k9IPxPI4j8IczGI9h5A8R",
	"Qxy/ifzREGcRzGajceK/AZgmQTQBHCUQtXFPp0e4dz2PsskVxt7iF5fAfSwPu55XoTzONmSyEKYj3/a5",
	"Cw/jVkRBfzg6yOURpp73fCUh51cEZoXiCp+NgisDK+s1DmsXFj5ojV0g6HETgygyihDN2ut5hY6N+yfy",
	"HpoA3esGvtk3wbOYCF2ueNRRkkY+omD2JQNjq8HwDJlM6qpoV0Lf94eXSJzDQ8i0AVPoY2ho1qiwyFiY",
	"yugxWgMXzNkSumbdNrJaiEiKhKvM5rr5OwGeYtxOctv6346pjISCsnnVJ0uSArAWLJJKoc6liLlYMSP3",
	"gWHMyupqQp7PfN/3L4G2hGjR2qd7J0N/OLoK/Ct/+jkYLibDReD/zvcX1m8iVQbGW3gxGLyiYmmDGQ2/",
	"BYzd46VdbfffymFnJb0MjIIsdLw8RV3S/oCU3X26Kcugx2TGDZUFFywCbZuUXmsDYUozhQvdCnno+/P+",
	"7CLt2sC6O+Tqukod29TFX5HOfjvrZrcl1yT1ZQwGjpndLtDVRoKBUrClFJQ2PY8bzKzt/ytMvIX3f4P9",
	"CB+U83tQ8k6dA7uMZyOKkD9xsVpCHCvUHV5rE1aa2OqrQtAH5Xbzpzi4xenbUTINotltEM/ejMNwNr31",
	"Z9ObwL+9jUa3fjAZt7dn3DXSKWsvRlan0lm3mLWiR5kjdUUOhXYEmUp9SIqlzddGz2EF1FvgXHcls0bT",
	"2vU6sPa2n2JPUWQhqiZ7psAzW/3hljZCqvYuzN/M5/P5pdlSGki7RqmBlCWFiDVTwLVr1LtPN23hcUkC",
	"JxxH7ege111I+UalpDpXpVpjVgqwGngQTGqMXBhcoaISy1BrWJ1cpXrdzACkKdvKQrFwa1AzUMg2StqY",
	"W9J2dqZGrHw8NFXOgUCspFlbfBlVmPV/RHY5UehkV1eRTEej/mx+WZ11cshPPgfBYjJ9/SEfKSRZs4Su",
	"IVLOjnpkuMotNKoTs2HPu18dD016PmtC1KqyY0icRcQWc0nCB1E2wTiLOsgTVKhwAyo+DlEbeKRJ5N5r",
	"q4FoHcY1w5SvOJGikY4hDznxMopgWWIrRfwjxmcwdo3TffEjywptWIjsvvD9UfR79qsz/PWVeLzQyxLr",
	"rnNCCinQbc6jW7IQ1e8WUewNLgTppZPD6Uy+vOOzi82cQi//tUlYHWXCLTNrrmvl1MF6o2AcTC4G0s3G",
	"ivbaAInVBvacC4Zt1jxa22xWPVWeMjegWQrasEzGPOEHNwgN+vTni+Ho9emz0MsKSSeFHgz+uil7FYk0",
	"NBh9y0UinQwQBiI3HzPgqZ3wifzjEyputn2DQOUkICO81x9/YrrIc6nsvYUi67UxuV4MBuXzvsn6XBJd",
	"trP+mY5pmOZrzkKIHlHELFfyicekAtLUbkFSCHu400wgxlXdNI53GwzvheYG+/ekUlMeodB2wpYA3//l",
	"jl0nCSrJ3qNABSn7WIQpj9gHZ8ueRuyH6/cfP1yN+v5vj4LYbDb9lSj6Uq0G5ep6AKs8JfM+iv7aZKmd",
	"DdzYQihD+qEJkRHCKkry8YRKuywEfb/v0/eksyHnVPh9vz+ystys7XbXM2hQXxnaySB1x1HxncsdsYCI",
	"c8mFIRYgfUGJ67hzhDqbNoU0bexfP8XewvuE5rr65J0TWOUt51sZb6tyQXdmhTxPeeSQ/l27qzk3BV+a",
	"kcd3qLuynnUuKeW0wND3j8P9658peWP36iJYnDq27tuu3gJJ+LwwLAcFGRpUP7KWsN0XcIwGeKqpKi28",
	"4PXhvUs5CsNSiB41e4KUxwwKs0ZhSkcsUhjTn5Bqh2vy88+vj+sTKip3q+yFNGwjlaVV0Ayfc4wMxn1G",
	"ZFBuPQ2wXMkQwnTr4rgXYWEsA2iq5ZBMjeIYsxQMKptkmt5FloHaEoui6ar0vZTb9RpNRXpyQOGtui5s",
	"V2XnuEMtAxFXzBRrBlFUZEVqR5qWLAHV0UM3paMb0q3dNX2RHWhfnnTsxPde+d4rR71C9b0qJ2M9s8oK",
	"6nmDlD/hyd7gTnZqVE/2fwzI+A9H9X9t1ziXzFvguh1YYArBDaCzkdnetZ9RZmJps3sM92924fNnz8Qf",
	"dZzHZIZmzcXqN7q8zng5sBP4bLSk7B1RfSkl8+5FxmrtZn0zvoE0JXrcC+/qfryDuu40qpK26j7W3uKX",
	"Lx1a7mBh8ldqaclkaIA7IPfi2y9GOfkiWbQXoPsLxb32NarAXqMVv36funt4RU7eX1h85+PL8vHYH3ec",
	"iiXTRbS2B+H/fdr+liZ38LUD3NHJZx1f2kckyLk74w3cx4OnwNs97P4ZAAD//zrLgY4zIQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
